// skipped
// TODO: make fast with boundschecking enabled

dat Gun{
	cylinder: 𝔹[];
	def Gun(){
		cylinder = array(6,0:𝔹);
		cylinder[0] = 1:𝔹; // add one bullet
	}
	def shift(k:ℕ){
		c := cylinder;
		for i in [0..6){
			cylinder[i] = c[(i+k)%6];
		}		
	}
	def shuffle(){
		shift(uniformInt(0,5) coerce ℕ);
	}
	def shoot(){
		r := cylinder[0];
		shift(1);
		return r;
	}
}

def experiment1(){
	gun := Gun();
	alive := 1:𝔹;
	gun.shuffle();
	alive &= !gun.shoot();
	gun.shuffle();
	alive &= !gun.shoot();
	return alive;
}

def experiment2(){
	gun := Gun();
	alive := 1:𝔹;
	gun.shuffle();
	alive &= !gun.shoot();
	alive &= !gun.shoot();
	return alive;	
}

def main(){
	p₁ := expectation(infer(experiment1));
	p₂ := expectation(infer(experiment2));
	return p₁ > p₂; // expected: δ(1)[r]
}
