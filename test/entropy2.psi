// skipped

n := 3;

def log‚ÇÇ(x)=>log(x)/log(2);

def S[a](d: Distribution[a], x: a, eq: a√óa‚Üíùîπ)‚áí
    log‚ÇÇ(1/expectation(infer(()‚áí eq(sample(d),x))));

def H[a](d: Distribution[a], eq: a√óa‚Üíùîπ)‚áí
    expectation(infer(()‚áí S(d,sample(d),eq)));

def œÄ‚ÇÅ[a,b](d: Distribution[a√ób])‚áí infer(()=>sample(d)[0]);
def œÄ‚ÇÇ[a,b](d: Distribution[a√ób])‚áí infer(()=>sample(d)[1]);

def I[a,b](d: Distribution[a√ób], eq‚ÇÅ: a√óa‚Üíùîπ, eq‚ÇÇ: b√ób‚Üíùîπ)‚áí
	  H(œÄ‚ÇÅ(d),eq‚ÇÅ) + H(œÄ‚ÇÇ(d),eq‚ÇÇ) - H(d,eq_p(eq‚ÇÅ,eq‚ÇÇ));

def eq‚Ñù(x,y)=>x==y;
def eq_a[a](eq: a√óa‚Üíùîπ)(x: a[],y: a[]){
	for i in [0..n){
		if !eq(x[i],y[i]){
			return false;
		}
	}
	return true;
}
def eq_p[a,b](eqa:a√óa‚Üíùîπ,eqb:b√ób‚Üíùîπ)(x:a√ób,y:a√ób)‚áí
	eqa(x[0],y[0])&&eqb(x[1],y[1]);

def genCap‚ÇÇ[a,b](f: a‚Üí b, d: Distribution[a], noise: a‚Üí a, eq: b√ób‚Üíùîπ){
	return I(infer((){ // context-independent information: mutual information of outputs when applying different noise to the same input
		x := sample(d);
		x‚ÇÅ := noise(x);
		x‚ÇÇ := noise(x);
		return (f(x‚ÇÅ),f(x‚ÇÇ));
	}),eq,eq);
}

def categoricals(p:‚Ñù[]){
	r := array(n,0);
	for i in [0..n){ r[i]=categorical(p); }
	return r;
}

def main(){
	return H(infer(()=>categoricals([0.2,0.5,0.3])),eq_a(eq‚Ñù));
}
