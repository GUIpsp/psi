// skipped

a := 0, b := 1; // TODO: chars and strings.
bagel := 0, cookie := 1, nothing := 2, state := 3;

def haveCookie(obj:ℕ)⇒obj==cookie;

def makeVendingMachine(aEffects: ℝ[],bEffects: ℝ[])(state:ℕ,action:ℕ)=>
	if action == a { [bagel,cookie][categorical(aEffects)] } else
	if action == b { [bagel,cookie][categorical(bEffects)] } else
                   { nothing };

def dirichlet(α: ℝ[]){ // TODO: add dirichlet distribution
	assert(α.length==2&&α[0]==1&&α[1]==1);
	p := uniform(0,1);
	return [p,1-p];
}

def main(){
	actionPrior := infer(()=>[a,b][categorical([0.5,0.5])]);
	def chooseAction(goalSatisfied: ℕ → 𝔹, transition: ℕ×ℕ → ℕ, state: ℕ)=>
		infer((){
			action := sample(actionPrior);
			observe(goalSatisfied(transition(state, action)));
			return action;
		});
	
	aEffects := dirichlet([1,1]);
	bEffects := dirichlet([1,1]);
	vendingMachine := makeVendingMachine(aEffects,bEffects);
	goal := [bagel,cookie][categorical([0.5,0.5])];
	def goalSatisfied(outcome:ℕ) => outcome==goal;
	observe(goal==cookie&&sample(chooseAction(goalSatisfied, vendingMachine, state))==b);
	//return bEffects[1]; // expected: (-2·log(bEffects₁)+2·log(2))·[-1+bEffects₁≤0]·[-bEffects₁≤0]·[bEffects₁≠0]·bEffects₁+2·[-1+bEffects₁≤0]·[-bEffects₁≤0]·bEffects₁·log(1/2+1/2·bEffects₁)
	return (aEffects[1],bEffects[1]); // expected: [-1+aEffects₁≤0]·[-1+bEffects₁≤0]·[-aEffects₁≤0]·[-bEffects₁≤0]·bEffects₁·⅟(1/2·aEffects₁+1/2·bEffects₁)
}
