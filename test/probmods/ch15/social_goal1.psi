// skipped

a := 0, b := 1; // TODO: chars and strings.
bagel := 2, cookie := 3, nothing := 4, state := 5;

def haveCookie(obj) ⇒ obj==cookie;

def vendingMachine(state,action)=>
	if action == a { [bagel,cookie][categorical([0.9,0.1])] } else
	if action == b { [bagel,cookie][categorical([0.1,0.9])] } else
                   { nothing };


def main(){
	actionPrior := infer(()=>[a,b][categorical([0.5,0.5])]);
	def chooseAction(goalSatisfied: ℝ → 𝔹, transition: ℝ×ℝ → ℝ, state)=>
		infer((){
			action := sample(actionPrior);
			observe(goalSatisfied(transition(state, action)));
			return action;
		});
	goalPosterior := infer((){
		goal := [bagel,cookie][categorical([0.5,0.5])];
		goalSatisfied := (outcome) => outcome == goal;
		actionDist := chooseAction(goalSatisfied, vendingMachine, state);
		observe(sample(actionDist)==b);
		return goal;
	});
	return sample(goalPosterior); // expected: 1/10·δ(2)[r]+9/10·δ(3)[r]
}
