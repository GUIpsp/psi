// skipped

def allSprouted(state:ℕ) => state == 3;
def someSprouted(state:ℕ) => state > 0;
def noneSprouted(state:ℕ) => state == 0;

all := 0, some := 1, none := 3;

def meaning(words:ℕ)⇒
	if words == all  { allSprouted  } else
	if words == some { someSprouted } else
	if words == none { noneSprouted } else
                     { assert(false);   };

def main(){
	statePrior := infer(()⇒ categorical([1/4,1/4,1/4,1/4]));
	sentencePrior := infer(()⇒ [all,some,none][categorical([1/3,1/3,1/3])]);
	def speaker(state:ℕ, listener: ℕ → Distribution[ℕ])⇒ infer((){
		words := sample(sentencePrior);
		observe(state == sample(listener(words)));
		return words;
	});
	def listener(words:ℕ, speaker: ℕ → Distribution[ℕ])⇒ infer((){
		state := sample(statePrior);
		observe(words == sample(speaker(state)));
		return state;
	});
	def literal_listener(words:ℕ)⇒ infer((){
		state := sample(statePrior);
		wordsMeaning := meaning(words);
		observe(wordsMeaning(state));
		return state;
	});
	depth := 10; // original: depth := 1;
	cur_listener := literal_listener;
	for i in [0..depth){
		cur_speaker := (state:ℕ)⇒ speaker(state,cur_listener);
		cur_listener = (words:ℕ)⇒ listener(words,cur_speaker);
	}
	return sample(cur_listener(some)) == 3; // expected: 1/6141·δ(1)[r]+6140/6141·δ(0)[r]
}
