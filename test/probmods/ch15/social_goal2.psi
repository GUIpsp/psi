// skipped

a := 0, b := 1; // TODO: chars and strings.
bagel := 0, cookie := 1, nothing := 2, state := 3;

def haveCookie(obj) ⇒ obj==cookie;

def vendingMachine(state:ℕ,action:ℕ)=>
	if action == a { [bagel,cookie][categorical([0.9,0.1])] } else
	if action == b { [bagel,cookie][categorical([0.5,0.5])] } else
                   { nothing };

def main(){
	actionPrior := infer(()=>[a,b][categorical([0.5,0.5])]);
	def chooseAction(goalSatisfied: ℕ → 𝔹, transition: ℕ×ℕ → ℕ, state: ℕ)=>
		infer((){
			action := sample(actionPrior);
			observe(goalSatisfied(transition(state, action)));
			return action;
		});
	goalPosterior := infer((){
		goal := [bagel,cookie][categorical([0.5,0.5])];
		goalSatisfied := (outcome:ℕ) => outcome == goal;
		actionDist := chooseAction(goalSatisfied, vendingMachine, state);
		observe(sample(actionDist)==b);
		return goal;
	});
	return sample(goalPosterior); // expected: 3/10·δ(0)[r]+7/10·δ(1)[r]
}
