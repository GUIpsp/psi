// skipped


n := 3;

def p(a: 𝔹[]){
	x := 0; // uniformInt(0,2); // does not matter
	/*m := [([0,0,0], x),
		  
		  ([1,0,0], 2),
		  ([0,1,0], 1),
		  
		  ([1,1,0], 1),
		  ([0,0,1], 0),
		  
		  ([1,0,1], 2),
		  ([0,1,1], 0),
		  
		  ([1,1,1], x)];*/
	m := [([0,0,0], x),
		  
		  ([1,0,0], 0), // connected to all that [0 at 0 and label ∈ [1,2]] [1 at 0 and label=0]
		  ([0,1,0], 2),
		  ([0,0,1], 1),
		  ([1,0,1], 0),
		  ([1,1,0], 2),
		  ([0,1,1], 1),
		  
		  ([1,1,1], x)];

	observe(a[0]||a[1]||a[2]);
	observe(!a[0]||!a[1]||!a[2]);
	/*m := [([0,0,0,0], x),
		  
		  ([1,0,0,0], 0),
		  ([0,1,0,0], 1),
		  ([0,0,1,0], 2),
		  ([0,0,0,1], 3),

		  ([1,1,0,0], x),
		  ([1,0,1,0], x),
		  ([0,1,1,0], x),
		  ([1,0,0,1], x),
		  ([0,1,0,1], x),
		  ([0,0,1,1], x),
		  
		  ([1,1,1,0], x),
		  ([1,1,0,1], x),
		  ([1,0,1,1], x),
		  ([0,1,1,1], x),
		  
		  ([1,1,1,1], x),
		 ];*/
	
	for i in [0..m.length){
		ok := true;
		for j in [0..n){
			if m[i][0][j]!=a[j]{
				ok = false;
			}
		}
		if ok{
			return m[i][1];
		}
	}
	assert(false);
}
def q(b: 𝔹[]){
	return p(b);
}

def main(){
	(a,b) := (array(n,false), array(n,false));
	for i in [0..n){
		a[i] = flip(1/2);
		b[i] = flip(1/2);
	}
	observe(a[q(b)]!=b[p(a)]);
	/*a := array(n,0);
	for i in [0..n){
		a[i] = flip(1/2);
	}
	return expectation(infer((){
		b := array(n,0);
		for i in [0..n){
			b[i] = flip(1/2);
		}
		return a[q(b)]==b[p(a)];
	}));*/
	return (((a[0],a[1],a[2]),(b[0],b[1],b[2])),);
}


/+
def p(a: ℝ[]){
	r := 0;
	while r+1<n&&a[r]==0{
		r+=1;
	}
	return r;
}
def q(b: ℝ[]){
	return p(b);
}
+/

/+
n := 5;

def p(a: ℝ[]){
	/*r := 0;
	while r+1<n&&a[r]==0{
		r+=1;
	}
	return r;*/
	tot := 0;
	for i in [0..n){
		tot+=a[i];
	}
	for i in [0..n){
		if tot<n/2{
			if !a[i]{
				return i;
			}
		}else{
			if a[i]{
				return i;
			}
		}
	}
	assert(0);
}
def q(b: ℝ[]){
	//return p(b);
	tot := 0;
	for i in [0..n){
		tot+=b[i];
	}
	for i in [0..n){
		if tot<n/2{
			if !b[i]{
				return n-1-i;
			}
		}else{
			if b[i]{
				return n-1-i;
			}
		}
	}
	assert(0);
}

def main(){
	(a,b) := (array(n,0),array(n,0));
	for i in [0..n){
		a[i] = flip(1/2);
		b[i] = flip(1/2);
	}
	return a[q(b)]==b[p(a)];
}
+/
/+
def main(){
	x := 0;
	for i in [0..5){
		x += uniform(0,1);
	}
	return x-6;
}
+/
/+
def main(){
	/*b := array(7,0);
	for i in [0..10){
		b[uniformInt(0,6)]=1;
	}
	k := 0;
	for i in [0..7){
		k+=b[i];
	}
	return k;*/
	k := sampleFrom("(k)=>1/40353607·δ(1)[k]+2187000/5764801·δ(5)[k]+2347920/5764801·δ(6)[k]+279900/40353607·δ(3)[k]+4092600/40353607·δ(4)[k]+438/5764801·δ(2)[k]+86400/823543·δ(7)[k]");
	return 7^10*(k==4);
}
+/
