// skipped

RED := 0, GREEN := 1; // alleles
dat Patient{
	allele: ℝ[];
	def Patient(allele: ℝ[]){
		this.allele=allele;
		/*if flip(1/2){
			tmp:=this.allele[0];
			this.allele[0]=this.allele[1];
			this.allele[1]=tmp;
		}*/
	}
}
def patient(): Patient{
	return Patient([flip(0.77),flip(0.77)])
}
def child(a: Patient, b: Patient): Patient{
	allele := [a.allele[flip(1/2)],b.allele[flip(1/2)]];
	if flip(1/2){
		tmp := allele[0];
		allele[0]=allele[1];
		allele[1]=tmp;
	}
	return Patient(allele);
}
def belief()⇒ infer((){
	(alice,bob) := (patient(),patient());
	carol := child(alice,bob);
	patients := [alice,bob,carol];
	return patients;
});
def prior()⇒ sample(belief());
def query(patient: Patient[]){
	numRed := 0;
	for i in [0..3){
		for j in [0..2){
			if patient[i].allele[j] == RED{
				numRed += 1;
	}   }   }
	if numRed == 4 || numRed == 5 || numRed == 6 {
		return pick([4,5,6]);
	}
	return numRed;
}
def secret(i,patients: Patient[]){
	patient := patients[i];
	return patient.allele[0] == RED &&
		patient.allele[1] == RED;
}
/+def secret(i,patients: Patient[]){
	bob := patients[1];
	return bob.allele[0] == RED &&
		bob.allele[1] == RED;
}+/
def max(a,b)⇒ if a>b then a else b;
def pick[a](x: a[])⇒ x[uniformInt(0,x.length-1)];

def outputProb(o){
	patients := prior();
	output := query(patients);
	return output == o;
}

def secretProb(i,o){
	patients := prior();
	output := query(patients);
	observe(output==o);
	return secret(i,patients);
}

def main(i,o){
	return secretProb(i,o);
}

/+def main(){
	results := array(7,(0,0,0));
	prior := belief();
	for o in [0..6]{
		posterior := infer((){
			patients := sample(prior);
			result := query(patients);
			observe(result == o);
			return patients;
		});
		results[o][0] = expectation(infer(()=>secret(0,sample(posterior))));
		results[o][1] = expectation(infer(()=>secret(1,sample(posterior))));
		results[o][2] = expectation(infer(()=>secret(2,sample(posterior))));
	}
	r := results;
	return ((r[0],r[1],r[2],r[3],r[4],r[5],r[6]),);
	/*posterior := infer((){
		//patients := sample(prior);
		//(alice,bob,carol):=(patients[0],patients[1],patients[2]);
		alice := patient();
		bob := patient();
		carol := child(alice,bob);
		observe(alice.allele[0]==A && alice.allele[1]==B);
		observe(carol.allele[0]==A && carol.allele[1]==B);
		//return patients;
		return [alice,bob,carol];
	});*/
	//return expectation(infer(()=>secret(sample(posterior))));
	//r := sample(posterior);
	//return ((r[0].allele[0],r[0].allele[1]),(r[1].allele[0],r[1].allele[1]),(r[2].allele[0],r[2].allele[1]),);
	//return ((r[1].allele[0],r[1].allele[1]),);
	//return results;
}+/

/*
Two cases:

1. Carol inherits A from Alice -> Know Bob has at least one B.
2. Carol inherits B from Alice -> Know Bob has at least one A.

0.5*(0.1*0.9(AB)+0.9*0.1(BA)+0.1*0.1(AA))+
0.5*(0.1*0.9(AB)+0.9*0.1(BA)+0.9*0.9(BB))

= 0.1*0.9(AB)+0.9*0.1(BA)+0.5*0.1*0.1(AA)+0.5*0.9*0.9(BB)

TOT: 0.5*(0.1*0.9+0.9*0.1+0.1*0.1)+0.5*(0.1*0.9+0.9*0.1+0.9*0.9)=0.59.



 */
